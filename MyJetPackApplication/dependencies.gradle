import groovy.json.JsonSlurper

class Properties {
    static def config

    static def init(rootDir) {
        config = new JsonSlurper().parseText(new File("$rootDir/dependencies.json").text)
    }
}

Properties.init("$rootDir")

println("allSwitchToSource: ${Properties.config.allSwitchToSource}")

def includeModules() {
    Properties.config.modules.each { module ->
        if (Properties.config.allSwitchToSource.toBoolean() || module.switchToSource.toBoolean()) {
            if (module.path) {
                include ":${module.name}"
                project(":${module.name}").projectDir = new File("$rootDir", module.path)
            }
        }
    }
}

def installDependencies() {
    def module = Properties.config.modules.find{ module ->
        module.name == name
    }
    if (module.application) {
        Properties.config.modules.each { dependency ->
            installDependency(dependency)
        }
        return
    }
    if (module) {
        if (module.dependencies) {
            module.dependencies.each { name ->
                def dependency = Properties.config.modules.find{ item ->
                    item.name == name
                }
                installDependency(dependency, "api")
            }
        }
        if (module.runAlone) {
            def single = Properties.config.modules.find{ item ->
                item.name == "single"
            }
            if (single && (Properties.config.allSwitchToSource.toBoolean() || single.switchToSource.toBoolean()) && single.path) {
                dependencies.add("implementation", project(":single"))
            }
            else {
                dependencies.add("implementation", "com.example.myjetpackapplication:single:$single_version")
            }

            if (module.aloneDependencies) {
                module.aloneDependencies.each { aloneDependency ->
                    def dependency = Properties.config.modules.find{ item ->
                        item.name == aloneDependency
                    }
                    installDependency(dependency)
                }
            }
        }
    }
}

private def installDependency(dependency, type = "implementation") {
    if (dependency.annotationProcessor) {
        if (project.plugins["kotlin-kapt"]) {
            type = "kapt"
        } else {
            type = "annotationProcessor"
        }
    }
    println("dependency: ${dependency.name}; type: $type")
    def module = Properties.config.modules.find { module ->
        module.name == name
    }
    if (dependency) {
        if (dependency.application || (module.application && dependency.excludeFromApplication)) {
            return
        }
        if ((Properties.config.allSwitchToSource.toBoolean() || (dependency.switchToSource.toBoolean() && !dependency.runAlone)) && dependency.path) {
            dependencies.add("$type", project(":${dependency.name}"))
        }
        else {
            def versionStartIndex = dependency.location.indexOf("\$")
            if (versionStartIndex < 0) {
                dependencies.add("$type", dependency.location)
            }
            else {
                def version = property(dependency.location.substring(versionStartIndex + 1))
                dependencies.add("$type", "${dependency.location.substring(0, versionStartIndex)}${version}")
            }
        }
    }
}

def findModule() {
    return Properties.config.modules.find { module ->
        module.name == name
    }
}

def isRunAlone() {
    def module = Properties.config.modules.find{ module ->
        module.name == name
    }
    return module.runAlone
}

def isApplication() {
    def module = Properties.config.modules.find{ module ->
        module.name == name
    }
    return module.application
}

def isRunAloneOrApplication() {
    def module = Properties.config.modules.find{ module ->
        module.name == name
    }
    return module.runAlone || module.application
}

ext {
    includeModules = this.&includeModules
    installDependencies = this.&installDependencies
    findModule = this.&findModule
    isRunAlone = this.&isRunAlone
    isApplication = this.&isApplication
    isRunAloneOrApplication = this.&isRunAloneOrApplication
}

