import groovy.xml.QName

/**
 * 将指定的配置信息打包进入pom的dependencies节点
 * scope的取值有
 * compile  --- api
 * provided --- implementation
 * runtime  --- compileOnly
 * test     --- testImplementation androidTestImplementation
 * @param dependencies pom的dependencies节点
 * @param configuration 当前操作的配置信息
 * @param scope 当前的配置预期写入的scope类型。
 * @return void
 */
static def wrapIntoDependencies(Node dependencies, Configuration configuration, String scope) {
    if (configuration == null || scope == null || scope.isEmpty()) {
        return
    }
    configuration.allDependencies.each { Dependency dep ->
        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified" || dep.version == "unspecified") {
            return
        }

        for(int i = 0; i < dependencies.children().size(); ++i) {
            Object next = dependencies.children().get(i)
            if (next instanceof Node) {
                Node node = (Node) next
                if (nodeName(node) == "dependency") {
                    if (node.groupId[0].value() == dep.group && node.artifactId[0].value() == dep.name && node.version[0].value() == dep.version) {
                        def scopes = ["compile", "provided", "runtime", "system", "test"]
                        def cur = scopes.indexOf(scope)
                        def attach = scopes.indexOf(node.scope[0].value())
                        if (node.scope[0].value() == null || node.scope[0].value().isEmpty()) {
                            attach = scopes.indexOf("compile")
                        }
                        def winner = cur
                        if (attach < cur) {
                            winner = attach
                        }
                        node.scope[0].value = scopes[winner]
                        return
                    }
                }
            }
        }

        def node = dependencies.appendNode("dependency")
        node.appendNode("groupId", dep.group)
        node.appendNode("artifactId", dep.name)
        node.appendNode("version", dep.version)
        node.appendNode("scope", scope)
    }
}

/**
 * 试图在创建之前检查对应节点是否存在，不存在则创建
 * @param parent 父节点
 * @param name 新建节点名字
 * @return 创建的节点
 */
def createSubNodeIfNotExist(Node parent, String name) {
    if (parent == null || name == null || name.isEmpty()) {
        return null
    }
    for(int i = 0; i < parent.children().size(); ++i) {
        Object next = parent.children().get(i)
        if (next instanceof Node) {
            if (nodeName(next) == name) {
                return next
            }
        }
    }
    return parent.appendNode(name)
}

/**
 * 获取节点的名字
 * @param node 节点
 * @return 节点的名字
 */
static def nodeName(Node node) {
    if (node == null) {
        return null
    }
    def name = node.name()
    if (name instanceof String) {
        return name
    }
    else if (name instanceof QName) {
        return name.localPart
    }
    return name
}

def canExecuteMavenPublish() {
    if (project.ext.version.endsWith('-SNAPSHOT')) {
        return project.hasProperty('deploy.snapshot.url') && project.hasProperty('deploy.snapshot.user.name') && project.hasProperty('deploy.snapshot.user.password')
    }
    return project.hasProperty('deploy.release.url') && project.hasProperty('deploy.release.user.name') && project.hasProperty('deploy.release.user.password')
}

/**
 * 获取项目属性
 * @param name 名字
 * @param defValue 默认值
 * @return 属性
 */
def getProperty(String name, Object defValue) {
    if (project.hasProperty(name)) {
        return project.property(name)
    }
    return defValue
}

apply plugin: 'maven-publish'

if (project.extensions.findByName('android')) {
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        options.linkSource true
        options.encoding "UTF-8"
        classpath += files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = "javadoc"
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = "sources"
        from android.sourceSets.main.java.sourceFiles
    }
}
else if (getProperty("projectType", "java") == "groovy") {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    task groovydocJar(type: Jar) {
        classifier "javadoc"
        from groovydoc
    }
    task sourcesJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allSource
    }
}
else {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    task javadocJar(type: Jar) {
        classifier "javadoc"
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allSource
    }
}

afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.ext.groupId
                artifactId project.ext.artifactId
                version project.ext.version
                description project.ext.description
                if (project.extensions.findByName('android')) {
                    artifact androidJavadocsJar
                    artifact androidSourcesJar
                    artifact bundleReleaseAar
                }
                else if (getProperty("projectType", "java") == "groovy") {
                    artifact jar
                    artifact groovydocJar
                    artifact sourcesJar
                }
                else {
                    artifact jar
                    artifact javadocJar
                    artifact sourcesJar
                }
                pom.withXml {
                    def dependencies = asNode().appendNode('dependencies')
                    if (configurations.findByName('api')) {
                        wrapIntoDependencies(dependencies, configurations.api, "compile")
                    }
                    if (configurations.findByName('implementation')) {
                        wrapIntoDependencies(dependencies, configurations.implementation, "provided")
                    }
                    if (configurations.findByName('testImplementation')) {
                        wrapIntoDependencies(dependencies, configurations.testImplementation, "test")
                    }
                    if (configurations.findByName('compile')) {
                        wrapIntoDependencies(dependencies, configurations.compile, "compile")
                    }
                    if (configurations.findByName('testCompile')) {
                        wrapIntoDependencies(dependencies, configurations.testCompile, "test")
                    }
                    if (configurations.findByName('compileOnly')) {
                        wrapIntoDependencies(dependencies, configurations.compileOnly, "runtime")
                    }
                    if (project.extensions.findByName('android')) {
                        if (configurations.findByName('androidTestImplementation')) {
                            wrapIntoDependencies(dependencies, configurations.androidTestImplementation, "test")
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url canExecuteMavenPublish() && (getProperty("publish", null) != 'project' && getProperty("registry", null) != 'project') ? project.property(project.ext.version.endsWith('-SNAPSHOT') ? 'deploy.snapshot.url' : 'deploy.release.url') : getProperty('registryDir', 'publish')
                if (canExecuteMavenPublish() && (getProperty("publish", null) != 'project' && getProperty("registry", null) != 'project')) {
                    credentials {
                        username project.property(project.ext.version.endsWith('-SNAPSHOT') ? "deploy.snapshot.user.name" : "deploy.release.user.name")
                        password project.property(project.ext.version.endsWith('-SNAPSHOT') ? "deploy.snapshot.user.password" : "deploy.release.user.password")
                    }
                }
            }
        }
    }
}